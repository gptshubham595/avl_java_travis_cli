/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 17:37:07 GMT 2022
 */

package main.java.avl_java_travis_cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.avl_java_travis_cli.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.delete(2019);
      aVLTree0.insert((-1));
      aVLTree0.delete((-30));
      aVLTree0.insert((-30));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert(290);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 1;
      aVLTree0.delete((-1));
      aVLTree0.delete(1);
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree0.insert(4287);
      aVLTree0.insert(2019);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.delete((-1));
      aVLTree0.height();
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1744);
      aVLTree0.insert(304);
      aVLTree0.find(702);
      aVLTree0.insert((-2402));
      aVLTree0.insert((-1));
      aVLTree0.insert((-647));
      aVLTree0.delete(2041);
      aVLTree0.find(0);
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.delete(704);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.delete(2041);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree_Node0.right = null;
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-3422));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert((-4470));
      aVLTree0.insert(616);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(616);
      aVLTree0.find(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.insert((-733));
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(2);
      aVLTree0.insert((-2329));
      aVLTree0.delete((-4470));
      aVLTree0.delete((-1));
      aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(178);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(178);
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-1328));
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node1.key = 1;
      aVLTree_Node0.key = 1;
      aVLTree0.insert((-3358));
      aVLTree_Node1.height = (-1379);
      aVLTree_Node1.height = 0;
      aVLTree0.find(1);
      aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.find(178);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
      int int0 = aVLTree0.getBalance(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1039;
      aVLTree0.insert(1039);
      aVLTree0.delete(1039);
      aVLTree0.insert(1039);
      aVLTree0.delete(1039);
      aVLTree0.getRoot();
      int int1 = (-1218);
      aVLTree0.insert((-1218));
      aVLTree0.delete(1039);
      aVLTree0.delete((-1218));
      aVLTree0.insert(1039);
      aVLTree0.insert(2356);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.insert(1039);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1661);
      aVLTree0.insert(701);
      aVLTree0.delete(1);
      aVLTree0.find(641);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(2040);
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-928));
      aVLTree0.delete(1289);
      aVLTree0.delete(1289);
      aVLTree0.delete((-928));
      aVLTree0.insert(0);
      int int0 = 1;
      aVLTree0.delete(1);
      aVLTree0.find(1);
      aVLTree0.insert((-928));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.delete((-1));
      aVLTree0.insert(3465);
      aVLTree0.insert((-1006));
      aVLTree0.delete((-1));
      aVLTree0.delete(0);
      aVLTree0.delete((-609));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-618));
      aVLTree0.insert((-2097));
      aVLTree0.delete((-1));
      aVLTree0.insert(961);
      aVLTree0.insert((-1));
      aVLTree0.delete((-2097));
      aVLTree0.insert(0);
      aVLTree0.delete((-1));
      aVLTree0.delete((-2097));
      aVLTree0.getRoot();
      aVLTree0.insert(2783);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2241));
      aVLTree0.insert((-1));
      aVLTree0.find((-2241));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = (-1);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.height = (-2789);
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.find(2687);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-3157);
      aVLTree0.delete(1048);
      aVLTree0.insert(2492);
      aVLTree0.insert((-3157));
      aVLTree0.insert((-2682));
      int int1 = 2089;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-2682));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-121));
      aVLTree0.getRoot();
      aVLTree0.find((-121));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1995));
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree_Node0.height = (-38);
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(2275);
      aVLTree0.delete(2275);
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree0.height();
      aVLTree0.find(1);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-2024));
      aVLTree0.delete((-788));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.delete((-576));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(139);
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.insert((-886));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      int int1 = 0;
      aVLTree0.insert((-1035));
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3723));
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-3723));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1208));
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-337));
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-10));
      aVLTree0.delete((-4470));
      aVLTree0.insert((-4470));
      aVLTree0.insert((-1645));
      aVLTree0.find((-1645));
      aVLTree0.find((-4470));
      aVLTree0.find((-4470));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.delete((-572));
      aVLTree0.delete((-360));
      aVLTree0.delete((-1032));
      aVLTree0.delete((-1032));
      aVLTree0.height();
      aVLTree0.find((-1));
      aVLTree0.find((-1));
      aVLTree0.delete((-1032));
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert((-3422));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.insert((-4470));
      aVLTree0.insert(616);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      aVLTree0.delete(616);
      aVLTree0.find(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert((-2329));
      aVLTree0.delete((-4470));
      aVLTree0.delete((-1));
      aVLTree0.find(1);
      aVLTree0.find((-546));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-469));
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.insert(0);
      aVLTree0.delete((-830));
      aVLTree0.delete(0);
      aVLTree0.insert((-469));
      aVLTree0.height();
      int int1 = aVLTree0.height();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1064));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1995));
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2966);
      aVLTree0.insert(0);
      aVLTree0.insert((-231));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node1.key = (-2789);
      aVLTree0.height();
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.height();
      aVLTree0.insert(0);
      aVLTree0.delete((-2789));
      aVLTree0.height();
      aVLTree0.delete((-2936));
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("main.java.avl_java_travis_cli.AVLTree", e);
      }
  }
}
